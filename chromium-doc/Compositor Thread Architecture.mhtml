From: <Saved by Blink>
Snapshot-Content-Location: https://www.chromium.org/developers/design-documents/compositor-thread-architecture/
Subject: Compositor Thread Architecture
Date: Fri, 19 Jul 2024 11:17:41 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----"


------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----
Content-Type: text/html
Content-ID: <frame-9BCDE076CFBAAA4BC1B09E77C0865209@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.chromium.org/developers/design-documents/compositor-thread-architecture/

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D=
"cid:css-ae1236e2-2a8b-43a8-9972-f03262060101@mhtml.blink" />
 =20
  <title>Compositor Thread Architecture</title>
  <link rel=3D"stylesheet" href=3D"https://www.chromium.org/_stylesheets/@d=
ocsearch/style.css">
  <link rel=3D"stylesheet" href=3D"https://www.chromium.org/_stylesheets/de=
fault.css">
</head>
<!-- Configure Google Analytics v4 -->
<!-- Google tag (gtag.js) -->



<body youdao=3D"bind"><div id=3D"cookieBar" aria-labelledby=3D"cookieBarTex=
t" role=3D"region"><div class=3D"cookieBarInner"><span id=3D"cookieBarText"=
 class=3D"cookieBarText">This site uses cookies from Google to deliver and =
enhance the quality of its services and to analyze traffic.</span><span cla=
ss=3D"cookieBarButtons"><a rel=3D"noopener" target=3D"_blank" href=3D"https=
://policies.google.com/technologies/cookies?hl=3Den" class=3D"cookieBarButt=
on cookieBarMoreButton">Learn more</a><a href=3D"https://www.chromium.org/d=
evelopers/design-documents/compositor-thread-architecture/#" role=3D"button=
" class=3D"cookieBarButton cookieBarConsentButton">OK, got it</a></span></d=
iv></div><header>
  <a href=3D"https://www.chromium.org/">
    <img alt=3D"the Chromium logo" src=3D"https://www.chromium.org/_assets/=
icon-chromium-96.png" width=3D"48" height=3D"48">
    <h2>The Chromium Projects</h2>
  </a>
  <div id=3D"search"><button type=3D"button" class=3D"DocSearch DocSearch-B=
utton" aria-label=3D"Search"><span class=3D"DocSearch-Button-Container"><sv=
g width=3D"20" height=3D"20" class=3D"DocSearch-Search-Icon" viewBox=3D"0 0=
 20 20"><path d=3D"M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.941=
9-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.94=
19 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke=
=3D"currentColor" fill=3D"none" fill-rule=3D"evenodd" stroke-linecap=3D"rou=
nd" stroke-linejoin=3D"round"></path></svg><span class=3D"DocSearch-Button-=
Placeholder">Search</span></span><span class=3D"DocSearch-Button-Keys"><spa=
n class=3D"DocSearch-Button-Key">=E2=8C=98</span><span class=3D"DocSearch-B=
utton-Key">K</span></span></button></div>
</header>

<div id=3D"main-wrapper">
  <nav id=3D"sidebar-left">
    <section>
      <a href=3D"https://www.chromium.org/chromium-projects">Home</a>
      <a href=3D"https://www.chromium.org/Home">Chromium</a>
      <a href=3D"https://www.chromium.org/chromium-os">ChromiumOS</a>
    </section>
    <section>
      <h4>Quick links</h4>
      <a href=3D"https://www.chromium.org/for-testers/bug-reporting-guideli=
nes">Report bugs</a>
      <a href=3D"https://www.chromium.org/developers/discussion-groups">Dis=
cuss</a>
    </section>
    <section>
      <h4>Other sites</h4>
      <a href=3D"https://blog.chromium.org/">Chromium Blog</a>
      <a href=3D"https://developer.chrome.com/extensions">Google Chrome Ext=
ensions</a>
    </section>
    <section id=3D"license" role=3D"complementary">
      Except as otherwise
      <a href=3D"https://developers.google.com/site-policies.html#restricti=
ons">noted</a>,
      the content of this page is licensed under a
      <a href=3D"https://creativecommons.org/licenses/by/2.5/">Creative Com=
mons Attribution 2.5 license</a>,
      and examples are licensed under the
      <a href=3D"https://chromium.googlesource.com/chromium/src/+/HEAD/LICE=
NSE">BSD License</a>.
    </section>
    <section id=3D"privacy" role=3D"complementary">
      <a href=3D"https://policies.google.com/privacy">Privacy</a>
    </section>
    <a id=3D"edit-this-page" href=3D"https://edit.chromium.org/edit?repo=3D=
chromium/website/main&amp;file=3Dsite/developers/design-documents/composito=
r-thread-architecture/index.md&amp;ext_google.git=3D%7B%22repo%22%3A%22chro=
mium%2Fwebsite%22%2C%22ref%22%3A%22main%22%2C%22file%22%3A%22site/developer=
s/design-documents/compositor-thread-architecture/index.md%22%7D">Edit this=
 page</a>
  </nav>
  <main>
    <div class=3D"breadcrumbs">
      <a href=3D"https://www.chromium.org/developers">For Developers</a> &g=
t;
      <a href=3D"https://www.chromium.org/developers/design-documents">Desi=
gn Documents</a> &gt;
    </div>
    <h1>Compositor Thread Architecture</h1>
  <p><strong>## <strong>&lt;jamesr, enne, vangelis, nduca&gt; @chromium.org=
</strong></strong></p>
<p><strong>### Goals</strong></p>
<p><strong>The main render thread is a pretty scary place. This is where HT=
ML, CSS, Javascript and pretty much everything on the web platform runs... =
or originates. It routinely stalls for tens to hundreds of milliseconds. On=
 ARM, stalls can be seconds long. Sadly, it is not feasible to prevent all =
these stalls: style recalculation, synchronous network requests, long paint=
ing times, garbage collection, all these things have content-dependent cost=
s.</strong>
<strong>The compositor thread architecture allows us to snapshot a version =
of the page and allow the user to scroll and see animations directly on the=
 snapshot, presenting the illusion that the page is running smoothly.</stro=
ng></p>
<p><strong>### Background</strong></p>
<p><strong>Some background on the basic frontend compositor archtecture, as=
 well as Chrome=E2=80=99s gpu architecture, can be found here: <a href=3D"h=
ttp://www.chromium.org/developers/design-documents/gpu-accelerated-composit=
ing-in-chrome">http://www.chromium.org/developers/design-documents/gpu-acce=
lerated-compositing-in-chrome</a></strong></p>
<p><strong>### Basic Approach</strong></p>
<p><strong>The compositor is architected into two halves: the main thread h=
alf, and the =E2=80=9Cimpl thread=E2=80=9D half. The word =E2=80=9Cimpl=E2=
=80=9D is horribly chosen, sorry! :)</strong>
<strong>The main thread half of the world is a typical layer tree. A layer =
has transformation, size, and content. Layers are filled in on-demand: laye=
rs can be damaged (setNeedsDisplayInRect). The compositor decides when to r=
un the layer delegate to tell it to paint. This is similar to InvalidateRec=
t/Paint model you see in most operating systems, but just with layers. Laye=
rs have children, and can clip/reflect/etc, allowing all sorts of neat visu=
al effects to be created.</strong>
<strong>The impl-side of the compositor is hidden from users of the layer t=
ree. It is a nearly-complete clone of the main thread tree --- when we have=
 a layer on the main thread, it has a corresponding layer on the impl threa=
d. Our naming is a little strange but:</strong></p>
<ul>
<li><strong>LayerChromium : the main thread version of a layer</strong></li=
>
<li><strong>CCLayerImpl : the impl-side verison of a layer</strong></li>
</ul>
<p><strong>The main thread tree is a model of what webkit wants to draw. Th=
e main thread paints layer contents into textures. These are handed to the =
impl tree. The impl tree is actually what gets drawn to the screen. We can =
draw the impl tree anytime, even while the main thread is blocked.</strong>
<strong>Users of the LayerChromium tree can specify that layers are scrolla=
ble. By routing all input events to the impl thread before passing them to =
the main thread, we can scroll and redraw the tree without ever consulting =
the main thread. This allows us to implement =E2=80=9Csmooth scrolling=E2=
=80=9D even when the main thread is blocked.</strong>
<strong>Users of the LayerChromium tree can add animations to the tree. We =
can run those animations on the impl tree, allowing hitch-free animations.<=
/strong></p>
<p><strong>### Tree Synchronization, Hosts and Commits</strong></p>
<p><strong>Every tab in Chromium has a different layer tree. Each tab has a=
 layer tree host, which manages the tab-specific state for the tree. Again:=
</strong></p>
<ul>
<li><strong>CCLayerTreeHost: owns a tree of LayerChromiums,
CCLayerTreeHost::m_rootLayer</strong></li>
<li><strong>CCLayerTreeHostImpl: owns a tree of CCLayerImpls,
CCLayerTreeHostImp::m_rootLayer</strong></li>
</ul>
<p><strong>These two trees, the main thread tree and the impl tree are comp=
letely isolated from one another. The impl tree is effectively a copy of th=
e main thread tree, although with a different data type. We manually synchr=
onize the impl tree to the main thread tree periodically, a process we call=
 =E2=80=9Ccommit=E2=80=9D. A commit is a recursive walk over the main tree=
=E2=80=99s layers where we push =E2=80=9CpushPropertiesTo=E2=80=9D the impl=
-side equivalent of a layer. We do this on the impl thread with the main th=
read completely blocked.</strong>
<strong>The basic logic of when to perform a commit is delayed. When the ma=
in tree changes, we simply make a note that a commit is needed (setNeedsCom=
mit). When a layer=E2=80=99s contents change, e.g. we change a HTML div tex=
t somehow, we treat it as a commit. Later (under the discretion of a schedu=
ler, discussed later) we decide to perform the commit. A commit is a blocki=
ng operation but still very cheap: it typically takes no more than a few mi=
lliseconds.</strong>
<strong>An aside on our primitive thread model: we assume that both the mai=
n thread and the impl thread are message loops. E.g. they have postTask and=
 postDelayedTask primitives. We try to keep both threads idle as often as p=
ossible and prefer async programming to taking a lock and blocking the thre=
ad.</strong>
<strong>The commit flow is as follows (see CCThreadProxy for implementation=
):</strong></p>
<ul>
<li><strong>The main thread gets damage. This turns into a setNeedsCommit</=
strong></li>
<li><strong>We post the setNeedCommit message to the impl thread.</strong><=
/li>
<li><strong>The impl thread passes the setNeedsCommit to the CCScheduler.
Note, the scheduler is an impl-side concept --- it cannot access any
state on the main thread.</strong></li>
<li><strong>The scheduler will consider the overall system state (whether w=
e
recently drew, when the next frame is, many other things) and will
eventually say =E2=80=9Cokay, begin a commit=E2=80=9D</strong></li>
<li><strong>The beginFrameAndCommit command from the scheduler turns into a
postTask back to the main thread.</strong></li>
<li><strong>When the bFAC message runs on the main thread we do the followi=
ng
things:</strong>
<ul>
<li><strong>Apply any impl-side scrolls to the main thread</strong></li>
<li><strong>Call the requestAnimationFrame callback</strong></li>
<li><strong>Perform any pending layout (namely, HTML layout)</strong></li>
<li><strong>Paint any layers that need to be painted (software
rasterization)</strong></li>
</ul>
</li>
<li><strong>Once painting is done, we post a message to the impl thread say=
ing
=E2=80=9CbeginCommit.=E2=80=9D The main thread then waits on a =E2=80=9Ccom=
mit done=E2=80=9D event.
This event will be signaled by the impl thread when it finishes the
commit.</strong></li>
<li><strong>The beginCommit message on the impl thread uploads textures, an=
d
then synchronizes the trees. When both are done, it signals the
=E2=80=9Ccommit done=E2=80=9D event, which unblocks the main thread which w=
as
previously waiting on that event. This finishes the commit and the
two trees are synchronized.</strong></li>
</ul>
<p><strong>At this point, the impl tree can draw as often as it wants witho=
ut consulting the main thread. Similarly, the main thread (thus javascript,=
 etc) can mutate the main thread tree as much as it wants without consultin=
g the impl thread.</strong>
<strong>We have one very important rule in the CCThreadProxy architecture: =
the main thread can make blocking calls to the impl thread, but the impl th=
read cannot make a blocking call to the main thread. Breaking this rule can=
 lead to deadlocks.</strong></p>
<p><strong>## CCProxy</strong></p>
<p><strong>To allow development of the threaded compositor while still ship=
ping a single-threaded compositor, we have made it possible to run the same=
 basic two-tree architecture in both single- and threaded modes. In single =
threaded mode, we still have two trees and delayed commits, but simply run =
a different synchronization/scheduling algorithm and host the tree on the m=
ain thread. This is implemented by the CCProxy interface, which abstracts t=
he types of communication that go on between the main thread and the impl t=
hread. For instance:</strong></p>
<ul>
<li><strong>setNeedsCommit: tells the proxy to schedule a commit of the mai=
n
thread tree to the impl tree</strong></li>
<li><strong>setNeedsRedraw: tells the proxy to draw the impl tree (without
synchronizing the trees)</strong></li>
<li><strong>setVisible: tells the proxy to make the impl visible/invisible.=
</strong></li>
<li><strong>compositeAndReadback(void* buf)</strong></li>
<li><strong>=E2=80=A6 lots more</strong></li>
</ul>
<p><strong>Thus, there are two subclasses of CCProxy:</strong></p>
<ul>
<li><strong>CCSingleThreadProxy: runs the compositor in single thread mode,
where the impl tree exists and is drawn on the main thread</strong></li>
<li><strong>CCThreadProxy: runs the compositor on another thread, the impl
thread. This is the =E2=80=9Cthreaded compositor=E2=80=9D mode.</strong></l=
i>
</ul>
<p><strong>### CCScheduler</strong></p>
<p><strong>In addition to synchronizing trees, we have a lot of logic in th=
e compositor that deals with when to commit, when to draw, whether to run a=
nimations, when to upload textures, and so on. This logic is not specific t=
o whether the impl is running on the compositor thread or the main thread, =
so is put inside a standalone class called the CCScheduler. The scheduler e=
xists logically as part of the impl side of tree, and thus in threaded mode=
 lives on the impl thread.</strong>
<strong>The scheduler itself is a very simple class that glues together two=
 key systems:</strong></p>
<ul>
<li><strong>CCFrameRateController: decides when good times to draw are. It
listens to the underlying OS=E2=80=99 vsync api to detect vsync intervals a=
s
well as progress updates from the GPU. Its job is to dynamically
pick a target frame rate and periodically kick the scheduler and
tell it =E2=80=9Cnow is a good time to draw.=E2=80=9D</strong></li>
<li><strong>CCSchedulerStateMachine: tracks all the state of the compositin=
g
operation, e.g. screen dirty, commit needed, commit begun, and so
on. We try to keep all corner case logic (=E2=80=9Coops, you cant draw now=
=E2=80=9D)
inside this code so that it can be exhaustively unit tested.</strong></li>
</ul>
<p><strong>Input Handling</strong>
<strong>A key use of the compositor thread is to scroll pages smoothly even=
 when the main thread is blocked. We do this by intercepting input events b=
efore they arrive on the main thread=E2=80=99s event loop and redirecting t=
hem onto the impl thread.</strong>
<strong>Once on the impl thread, they hit the WebCompositorInputHandler. Th=
is handler looks at the events and can ask the impl tree to try to scroll p=
articular layers. However, scrolls can sometimes fail: WebKit does not give=
 every scrollable area a layer (and associated clip objects). Therefore, on=
 the impl tree, we track on each layer areas that cannot be impl-side scrol=
led. If the scroll request from the WebCompositorInputHandler fails because=
 of hitting one of these areas, then we post the scrolling event to the mai=
n thread for normal processing. We call main-thread handled scrolls =E2=80=
=9Cslow scrolls=E2=80=9D and impl-thread-side scrolls =E2=80=9Cfast scrolls=
.=E2=80=9D</strong>
<strong>Memory Management</strong>
<strong>The compositor is based around the idea of caching the contents of =
a layer in texture (or other GPU-friendly representation). This uses memory=
, of course. Chrome, being a tabbed browser, can sometimes have hundreds of=
 tabs open and we need to somehow manage memory between all those tabs.</st=
rong>
<strong>We use a two-level memory management scheme. In the GPU process, we=
 have a GpuMemoryManager that tracks the visibility of all the tabs, and th=
e association of graphics contexts to those tabs. Roughly, it figures out w=
hich graphics contexts should get what amount of the total GPU resources ba=
sed on visibility and recently-used-ness. The global memory manager also fa=
ctors in the workload requested by each tab, so that a big gmail tab can ac=
tually get more than, for example, a little popup window.</strong>
<strong>At the compositor level, each LayertTreeHost/Impl pair get an alloc=
ation from the GPU process for a certain memory budget. They are to do thei=
r best to not exceed this memory budget. We do this by prioritizing all the=
 tiles on all layers, and then giving out memory budget to each tile in des=
cending priority order until we hit our limit. Prioritization includes thin=
gs like visibility, distance from viewport, whether the tile is on an anima=
ting layer, and whether the current layer velocity is likely to bring the t=
ile onscreen.</strong></p>
<p><strong>### Texture Upload</strong></p>
<p><strong>One challenge with all these textures is that we rasterize them =
on the main thread of the renderer process, but need to actually get them i=
nto the GPU memory. This requires handing information about these textures =
(and their contents) to the impl thread, then to the GPU process, and once =
there, into the GL/D3D driver. Done naively, this causes us to copy a singl=
e texture over and over again, something we definitely don't want to do.</s=
trong>
<strong>We have two tricks that we use right now to make this a bit faster.=
 To understand them, an aside on =E2=80=9Cpainting=E2=80=9D versus =E2=80=
=9Crasterization.=E2=80=9D</strong></p>
<ul>
<li><strong>Painting is the word we use for telling webkit to dump a part o=
f
its RenderObject tree to a GraphicsContext. We can pass the painting
routine a GraphicsContext implementation that executes the commands
as it receives them, or we can pass it a recording context that
simply writes down the commands as it receives them.</strong></li>
<li><strong>Rasterization is the word we use for actually executing graphic=
s
context commands. We typically execute the rasterization commands
with the CPU (software rendering) but could also execute them
directly with the GPU using Ganesh.</strong></li>
<li><strong>Upload: this is us actually taking the contents of a rasterized
bitmap in main memory and sending it to the GPU as a texture.</strong></li>
</ul>
<p><strong>With these definitions in mind, we deal with texture upload with=
 the following tricks:</strong></p>
<ul>
<li><strong>Per-tile painting: we pass WebKit paint a recording context tha=
t
simply records the GraphicsContext operations into an SkPicture data
structure. We can then rasterize several texture tiles from that one
picture.</strong></li>
<li><strong>SHM upload: instead of rasterizing into a void* from the render=
er
heap, we allocate a shared memory buffer and upload into that
instead. The GPU process then issues its glTex* operations using
that shared memory, avoiding one texture copy.</strong></li>
</ul>
<p><strong>The holy grail of texture upload is =E2=80=9Czero copy=E2=80=9D =
upload. With such a scheme, we manage to get a raw pointer inside the rende=
rer process=E2=80=99 sandbox to GPU memory, which we software-rasterize dir=
ectly into. We can=E2=80=99t yet do this anywhere, but it is something we f=
antasize about.</strong></p>
<p><strong>### Animation</strong></p>
<p><strong>We allow animations to be added with layers. They allow you to f=
ade or translate layers using =E2=80=9Ccurves,=E2=80=9D which are keyframed=
 representations of the position or opacity of a layer over time. Although =
animations are added on the main thread, they are executed on the impl thre=
ad. Animations done with the compositor are thus =E2=80=9Chitch free.=E2=80=
=9D</strong></p>
<p><strong><strong>### Terminology</strong></strong></p>
<p><strong>Threads:</strong></p>
<ul>
<li><strong>WebKit thread =3D=3D Main Thread. This is the thread on which t=
he
LayerChromium hierarchy lives.</strong></li>
<li><strong>Compositor thread =3D=3D the thread on which we will perform
compositing. We call it impl thread because this is where the
implementation of compositing happens.</strong></li>
<li><strong>IO Thread =3D=3D the chromium thread that receives IPCs</strong=
></li>
</ul>
<p><strong>Impl thread is a word we use often. The compositor can operate i=
n either single or threaded mode. Impl thread merely means =E2=80=9Cthis li=
ves on the impl half of the system.=E2=80=9D Seeing the word =E2=80=9Cimpl =
thread=E2=80=9D does not mean that that code only runs on the compositor th=
read -- it just means that it handles data that is part of the impl part of=
 the architecture.</strong>
<strong>Suffixes indicate which thread data lives on:</strong></p>
<ul>
<li>
<p><strong>Impl class lives on the compositor thread. Eg
cclayertreehostimpl</strong></p>
</li>
<li>
<p><strong>Lack of suffix means data on the main thread. Eg cclayertreehost=
</strong></p>
</li>
</ul>
<p><strong>We use words that are ordinarily synonyms to mean very important=
 and distinct steps in the updating of the screen:</strong></p>
<ul>
<li><strong>Painting: this is the process of asking Layers for their conten=
t.
This is where we ask webkit to tell us what is on a layer. We might
then rasterize that content into a bitmap using software, or we
might do something fancier. Painting is a main thread operation.</strong></=
li>
<li><strong>Drawing: this is the process of taking the layer tree and smash=
ing
it together with OpenGL onto the screen. Drawing is an impl-thread
operation.</strong></li>
</ul>

  </main>
</div>

</body></html>
------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-ae1236e2-2a8b-43a8-9972-f03262060101@mhtml.blink

@charset "utf-8";

#cookieBar { background-color: rgb(90, 90, 90); border: none; border-radius=
: 0px; bottom: 0px; color: rgb(255, 255, 255); left: 0px; margin: 0px; posi=
tion: fixed; right: 0px; width: 100%; z-index: 999; }

#cookieBar .cookieBarInner { padding: 10px 15px; }

#cookieBar .cookieBarText, #cookieBar .cookieBarButtons { font-family: aria=
l, sans-serif; font-size: 13px; font-weight: 600; line-height: 1.8; }

#cookieBar .cookieBarText { margin-right: 5px; }

[dir=3D"rtl"] #cookieBar .cookieBarText { margin-left: 5px; margin-right: 0=
px; }

@media not all {
}

#cookieBar .cookieBarButton { background-color: rgb(48, 48, 48); border: 1p=
x solid rgba(0, 0, 0, 0.1); border-radius: 2px; color: rgb(255, 255, 255); =
cursor: pointer; line-height: 19px; margin-left: 5px; padding: 4px 8px; tex=
t-decoration: none; white-space: nowrap; }

[dir=3D"rtl"] #cookieBar .cookieBarButton { margin-left: 0px; margin-right:=
 5px; }
------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.chromium.org/_stylesheets/@docsearch/style.css

@charset "utf-8";

:root { --docsearch-primary-color: #5468ff; --docsearch-text-color: #1c1e21=
; --docsearch-spacing: 12px; --docsearch-icon-stroke-width: 1.4; --docsearc=
h-highlight-color: var(--docsearch-primary-color); --docsearch-muted-color:=
 #969faf; --docsearch-container-background: rgba(101,108,133,0.8); --docsea=
rch-logo-color: #5468ff; --docsearch-modal-width: 560px; --docsearch-modal-=
height: 600px; --docsearch-modal-background: #f5f6f7; --docsearch-modal-sha=
dow: inset 1px 1px 0 0 hsla(0,0%,100%,0.5),0 3px 8px 0 #555a64; --docsearch=
-searchbox-height: 56px; --docsearch-searchbox-background: #ebedf0; --docse=
arch-searchbox-focus-background: #fff; --docsearch-searchbox-shadow: inset =
0 0 0 2px var(--docsearch-primary-color); --docsearch-hit-height: 56px; --d=
ocsearch-hit-color: #444950; --docsearch-hit-active-color: #fff; --docsearc=
h-hit-background: #fff; --docsearch-hit-shadow: 0 1px 3px 0 #d4d9e1; --docs=
earch-key-gradient: linear-gradient(-225deg,#d5dbe4,#f8f8f8); --docsearch-k=
ey-shadow: inset 0 -2px 0 0 #cdcde6,inset 0 0 1px 1px #fff,0 1px 2px 1px rg=
ba(30,35,90,0.4); --docsearch-footer-height: 44px; --docsearch-footer-backg=
round: #fff; --docsearch-footer-shadow: 0 -1px 0 0 #e0e3e8,0 -3px 6px 0 rgb=
a(69,98,155,0.12); }

html[data-theme=3D"dark"] { --docsearch-text-color: #f5f6f7; --docsearch-co=
ntainer-background: rgba(9,10,17,0.8); --docsearch-modal-background: #15172=
a; --docsearch-modal-shadow: inset 1px 1px 0 0 #2c2e40,0 3px 8px 0 #000309;=
 --docsearch-searchbox-background: #090a11; --docsearch-searchbox-focus-bac=
kground: #000; --docsearch-hit-color: #bec3c9; --docsearch-hit-shadow: none=
; --docsearch-hit-background: #090a11; --docsearch-key-gradient: linear-gra=
dient(-26.5deg,#565872,#31355b); --docsearch-key-shadow: inset 0 -2px 0 0 #=
282d55,inset 0 0 1px 1px #51577d,0 2px 2px 0 rgba(3,4,9,0.3); --docsearch-f=
ooter-background: #1e2136; --docsearch-footer-shadow: inset 0 1px 0 0 rgba(=
73,76,106,0.5),0 -4px 8px 0 rgba(0,0,0,0.2); --docsearch-logo-color: #fff; =
--docsearch-muted-color: #7f8497; }

.DocSearch-Button { align-items: center; background: var(--docsearch-search=
box-background); border: 0px; border-radius: 40px; color: var(--docsearch-m=
uted-color); cursor: pointer; display: flex; font-weight: 500; height: 36px=
; justify-content: space-between; margin: 0px 0px 0px 16px; padding: 0px 8p=
x; user-select: none; }

.DocSearch-Button:active, .DocSearch-Button:focus, .DocSearch-Button:hover =
{ background: var(--docsearch-searchbox-focus-background); box-shadow: var(=
--docsearch-searchbox-shadow); color: var(--docsearch-text-color); outline:=
 none; }

.DocSearch-Button-Container { align-items: center; display: flex; }

.DocSearch-Search-Icon { stroke-width: 1.6; }

.DocSearch-Button .DocSearch-Search-Icon { color: var(--docsearch-text-colo=
r); }

.DocSearch-Button-Placeholder { font-size: 1rem; padding: 0px 12px 0px 6px;=
 }

.DocSearch-Button-Keys { display: flex; min-width: calc(0.8em + 40px); }

.DocSearch-Button-Key { align-items: center; background: var(--docsearch-ke=
y-gradient); border-radius: 3px; box-shadow: var(--docsearch-key-shadow); c=
olor: var(--docsearch-muted-color); display: flex; height: 18px; justify-co=
ntent: center; margin-right: 0.4em; padding-bottom: 2px; position: relative=
; top: -1px; width: 20px; }

@media (max-width: 750px) {
  .DocSearch-Button-Keys, .DocSearch-Button-Placeholder { display: none; }
}

.DocSearch--active { overflow: hidden !important; }

.DocSearch-Container, .DocSearch-Container * { box-sizing: border-box; }

.DocSearch-Container { background-color: var(--docsearch-container-backgrou=
nd); height: 100vh; left: 0px; position: fixed; top: 0px; width: 100vw; z-i=
ndex: 200; }

.DocSearch-Container a { text-decoration: none; }

.DocSearch-Link { appearance: none; background: none; border: 0px; color: v=
ar(--docsearch-highlight-color); cursor: pointer; font: inherit; margin: 0p=
x; padding: 0px; }

.DocSearch-Modal { background: var(--docsearch-modal-background); border-ra=
dius: 6px; box-shadow: var(--docsearch-modal-shadow); flex-direction: colum=
n; margin: 60px auto auto; max-width: var(--docsearch-modal-width); positio=
n: relative; }

.DocSearch-SearchBar { display: flex; padding: var(--docsearch-spacing) var=
(--docsearch-spacing) 0; }

.DocSearch-Form { align-items: center; background: var(--docsearch-searchbo=
x-focus-background); border-radius: 4px; box-shadow: var(--docsearch-search=
box-shadow); display: flex; height: var(--docsearch-searchbox-height); marg=
in: 0px; padding: 0 var(--docsearch-spacing); position: relative; width: 10=
0%; }

.DocSearch-Input { appearance: none; background: transparent; border: 0px; =
color: var(--docsearch-text-color); flex: 1 1 0%; font-style: inherit; font=
-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height=
: inherit; font-family: inherit; font-optical-sizing: inherit; font-kerning=
: inherit; font-feature-settings: inherit; font-variation-settings: inherit=
; font-size: 1.2em; height: 100%; outline: none; padding: 0px 0px 0px 8px; =
width: 80%; }

.DocSearch-Input::placeholder { color: var(--docsearch-muted-color); opacit=
y: 1; }

.DocSearch-Input::-webkit-search-cancel-button, .DocSearch-Input::-webkit-s=
earch-decoration, .DocSearch-Input::-webkit-search-results-button, .DocSear=
ch-Input::-webkit-search-results-decoration { display: none; }

.DocSearch-LoadingIndicator, .DocSearch-MagnifierLabel, .DocSearch-Reset { =
margin: 0px; padding: 0px; }

.DocSearch-MagnifierLabel, .DocSearch-Reset { align-items: center; color: v=
ar(--docsearch-highlight-color); display: flex; justify-content: center; }

.DocSearch-Container--Stalled .DocSearch-MagnifierLabel, .DocSearch-Loading=
Indicator { display: none; }

.DocSearch-Container--Stalled .DocSearch-LoadingIndicator { align-items: ce=
nter; color: var(--docsearch-highlight-color); display: flex; justify-conte=
nt: center; }

@media screen and (prefers-reduced-motion: reduce) {
  .DocSearch-Reset { animation: auto ease 0s 1 normal none running none; ap=
pearance: none; background: none; border: 0px; border-radius: 50%; color: v=
ar(--docsearch-icon-color); cursor: pointer; right: 0px; stroke-width: var(=
--docsearch-icon-stroke-width); }
}

.DocSearch-Reset { animation: 0.1s ease-in 0s 1 normal forwards running fad=
e-in; appearance: none; background: none; border: 0px; border-radius: 50%; =
color: var(--docsearch-icon-color); cursor: pointer; padding: 2px; right: 0=
px; stroke-width: var(--docsearch-icon-stroke-width); }

.DocSearch-Reset[hidden] { display: none; }

.DocSearch-Reset:focus { outline: none; }

.DocSearch-Reset:hover { color: var(--docsearch-highlight-color); }

.DocSearch-LoadingIndicator svg, .DocSearch-MagnifierLabel svg { height: 24=
px; width: 24px; }

.DocSearch-Cancel { display: none; }

.DocSearch-Dropdown { max-height: calc(var(--docsearch-modal-height) - var(=
--docsearch-searchbox-height) - var(--docsearch-spacing) - var(--docsearch-=
footer-height)); min-height: var(--docsearch-spacing); overflow-y: overlay;=
 padding: 0 var(--docsearch-spacing); scrollbar-color: var(--docsearch-mute=
d-color) var(--docsearch-modal-background); scrollbar-width: thin; }

.DocSearch-Dropdown::-webkit-scrollbar { width: 12px; }

.DocSearch-Dropdown::-webkit-scrollbar-track { background: transparent; }

.DocSearch-Dropdown::-webkit-scrollbar-thumb { background-color: var(--docs=
earch-muted-color); border: 3px solid var(--docsearch-modal-background); bo=
rder-radius: 20px; }

.DocSearch-Dropdown ul { list-style: none; margin: 0px; padding: 0px; }

.DocSearch-Label { font-size: 0.75em; line-height: 1.6em; }

.DocSearch-Help, .DocSearch-Label { color: var(--docsearch-muted-color); }

.DocSearch-Help { font-size: 0.9em; margin: 0px; user-select: none; }

.DocSearch-Title { font-size: 1.2em; }

.DocSearch-Logo a { display: flex; }

.DocSearch-Logo svg { color: var(--docsearch-logo-color); margin-left: 8px;=
 }

.DocSearch-Hits:last-of-type { margin-bottom: 24px; }

.DocSearch-Hits mark { background: none; color: var(--docsearch-highlight-c=
olor); }

.DocSearch-HitsFooter { color: var(--docsearch-muted-color); display: flex;=
 font-size: 0.85em; justify-content: center; margin-bottom: var(--docsearch=
-spacing); padding: var(--docsearch-spacing); }

.DocSearch-HitsFooter a { border-bottom: 1px solid; color: inherit; }

.DocSearch-Hit { border-radius: 4px; display: flex; padding-bottom: 4px; po=
sition: relative; }

@media screen and (prefers-reduced-motion: reduce) {
  .DocSearch-Hit--deleting { transition: none 0s ease 0s; }
}

.DocSearch-Hit--deleting { opacity: 0; transition: all 0.25s linear 0s; }

@media screen and (prefers-reduced-motion: reduce) {
  .DocSearch-Hit--favoriting { transition: none 0s ease 0s; }
}

.DocSearch-Hit--favoriting { transform: scale(0); transform-origin: center =
top; transition: all 0.25s linear 0.25s; }

.DocSearch-Hit a { background: var(--docsearch-hit-background); border-radi=
us: 4px; box-shadow: var(--docsearch-hit-shadow); display: block; padding-l=
eft: var(--docsearch-spacing); width: 100%; }

.DocSearch-Hit-source { background: var(--docsearch-modal-background); colo=
r: var(--docsearch-highlight-color); font-size: 0.85em; font-weight: 600; l=
ine-height: 32px; margin: 0px -4px; padding: 8px 4px 0px; position: sticky;=
 top: 0px; z-index: 10; }

.DocSearch-Hit-Tree { color: var(--docsearch-muted-color); height: var(--do=
csearch-hit-height); opacity: 0.5; stroke-width: var(--docsearch-icon-strok=
e-width); width: 24px; }

.DocSearch-Hit[aria-selected=3D"true"] a { background-color: var(--docsearc=
h-highlight-color); }

.DocSearch-Hit[aria-selected=3D"true"] mark { text-decoration: underline; }

.DocSearch-Hit-Container { align-items: center; color: var(--docsearch-hit-=
color); display: flex; flex-direction: row; height: var(--docsearch-hit-hei=
ght); padding: 0 var(--docsearch-spacing) 0 0; }

.DocSearch-Hit-icon { height: 20px; width: 20px; }

.DocSearch-Hit-action, .DocSearch-Hit-icon { color: var(--docsearch-muted-c=
olor); stroke-width: var(--docsearch-icon-stroke-width); }

.DocSearch-Hit-action { align-items: center; display: flex; height: 22px; w=
idth: 22px; }

.DocSearch-Hit-action svg { display: block; height: 18px; width: 18px; }

.DocSearch-Hit-action + .DocSearch-Hit-action { margin-left: 6px; }

.DocSearch-Hit-action-button { appearance: none; background: none; border: =
0px; border-radius: 50%; color: inherit; cursor: pointer; padding: 2px; }

svg.DocSearch-Hit-Select-Icon { display: none; }

.DocSearch-Hit[aria-selected=3D"true"] .DocSearch-Hit-Select-Icon { display=
: block; }

.DocSearch-Hit-action-button:focus, .DocSearch-Hit-action-button:hover { ba=
ckground: rgba(0, 0, 0, 0.2); transition: background-color 0.1s ease-in 0s;=
 }

@media screen and (prefers-reduced-motion: reduce) {
  .DocSearch-Hit-action-button:focus, .DocSearch-Hit-action-button:hover { =
transition: none 0s ease 0s; }
}

.DocSearch-Hit-action-button:focus path, .DocSearch-Hit-action-button:hover=
 path { fill: rgb(255, 255, 255); }

.DocSearch-Hit-content-wrapper { display: flex; flex: 1 1 auto; flex-direct=
ion: column; font-weight: 500; justify-content: center; line-height: 1.2em;=
 margin: 0px 8px; overflow-x: hidden; position: relative; text-overflow: el=
lipsis; white-space: nowrap; width: 80%; }

.DocSearch-Hit-title { font-size: 0.9em; }

.DocSearch-Hit-path { color: var(--docsearch-muted-color); font-size: 0.75e=
m; }

.DocSearch-Hit[aria-selected=3D"true"] .DocSearch-Hit-action, .DocSearch-Hi=
t[aria-selected=3D"true"] .DocSearch-Hit-icon, .DocSearch-Hit[aria-selected=
=3D"true"] .DocSearch-Hit-path, .DocSearch-Hit[aria-selected=3D"true"] .Doc=
Search-Hit-text, .DocSearch-Hit[aria-selected=3D"true"] .DocSearch-Hit-titl=
e, .DocSearch-Hit[aria-selected=3D"true"] .DocSearch-Hit-Tree, .DocSearch-H=
it[aria-selected=3D"true"] mark { color: var(--docsearch-hit-active-color) =
!important; }

@media screen and (prefers-reduced-motion: reduce) {
  .DocSearch-Hit-action-button:focus, .DocSearch-Hit-action-button:hover { =
background: rgba(0, 0, 0, 0.2); transition: none 0s ease 0s; }
}

.DocSearch-ErrorScreen, .DocSearch-NoResults, .DocSearch-StartScreen { font=
-size: 0.9em; margin: 0px auto; padding: 36px 0px; text-align: center; widt=
h: 80%; }

.DocSearch-Screen-Icon { color: var(--docsearch-muted-color); padding-botto=
m: 12px; }

.DocSearch-NoResults-Prefill-List { display: inline-block; padding-bottom: =
24px; text-align: left; }

.DocSearch-NoResults-Prefill-List ul { display: inline-block; padding: 8px =
0px 0px; }

.DocSearch-NoResults-Prefill-List li { list-style-position: inside; list-st=
yle-type: "=C2=BB "; }

.DocSearch-Prefill { appearance: none; background: none; border: 0px; borde=
r-radius: 1em; color: var(--docsearch-highlight-color); cursor: pointer; di=
splay: inline-block; font-size: 1em; font-weight: 700; padding: 0px; }

.DocSearch-Prefill:focus, .DocSearch-Prefill:hover { outline: none; text-de=
coration: underline; }

.DocSearch-Footer { align-items: center; background: var(--docsearch-footer=
-background); border-radius: 0px 0px 8px 8px; box-shadow: var(--docsearch-f=
ooter-shadow); display: flex; flex-direction: row-reverse; flex-shrink: 0; =
height: var(--docsearch-footer-height); justify-content: space-between; pad=
ding: 0 var(--docsearch-spacing); position: relative; user-select: none; wi=
dth: 100%; z-index: 300; }

.DocSearch-Commands { color: var(--docsearch-muted-color); display: flex; l=
ist-style: none; margin: 0px; padding: 0px; }

.DocSearch-Commands li { align-items: center; display: flex; }

.DocSearch-Commands li:not(:last-of-type) { margin-right: 0.8em; }

.DocSearch-Commands-Key { align-items: center; background: var(--docsearch-=
key-gradient); border-radius: 2px; box-shadow: var(--docsearch-key-shadow);=
 display: flex; height: 18px; justify-content: center; margin-right: 0.4em;=
 padding-bottom: 1px; width: 20px; }

@media (max-width: 750px) {
  :root { --docsearch-spacing: 10px; --docsearch-footer-height: 40px; }
  .DocSearch-Dropdown { height: 100%; }
  .DocSearch-Container { height: calc(var(--docsearch-vh, 1vh)*100); positi=
on: absolute; }
  .DocSearch-Footer { border-radius: 0px; bottom: 0px; position: absolute; =
}
  .DocSearch-Hit-content-wrapper { display: flex; position: relative; width=
: 80%; }
  .DocSearch-Modal { border-radius: 0px; box-shadow: none; height: calc(var=
(--docsearch-vh, 1vh)*100); margin: 0px; max-width: 100%; width: 100%; }
  .DocSearch-Dropdown { max-height: calc(var(--docsearch-vh, 1vh)*100 - var=
(--docsearch-searchbox-height) - var(--docsearch-spacing) - var(--docsearch=
-footer-height)); }
  .DocSearch-Cancel { appearance: none; background: none; border: 0px; colo=
r: var(--docsearch-highlight-color); cursor: pointer; display: inline-block=
; flex: 0 0 auto; font-style: inherit; font-variant: inherit; font-stretch:=
 inherit; line-height: inherit; font-family: inherit; font-optical-sizing: =
inherit; font-kerning: inherit; font-feature-settings: inherit; font-variat=
ion-settings: inherit; font-size: 1em; font-weight: 500; margin-left: var(-=
-docsearch-spacing); outline: none; overflow: hidden; padding: 0px; user-se=
lect: none; white-space: nowrap; }
  .DocSearch-Commands, .DocSearch-Hit-Tree { display: none; }
}

@keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}
------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.chromium.org/_stylesheets/default.css

@charset "utf-8";

*, ::before, ::after { box-sizing: border-box; }

body, h1, h2, h3, h4, h5, h6, p, figure, blockquote, dl, dd, pre { margin: =
0px; }

body { min-height: 100vh; }

ul[role=3D"list"], ol[role=3D"list"] { list-style: none; }

ul, ol { list-style-position: inside; }

a:not([class]) { text-decoration-skip-ink: auto; }

img { display: block; height: auto; max-width: 100%; }

p img { display: inline-block; vertical-align: sub; }

input, button, textarea, select { font: inherit; letter-spacing: inherit; w=
ord-spacing: inherit; }

iframe { border: 0px; }

img:not([alt]) { filter: blur(10px); }

hr { height: 1px; margin: 0px; }

@media (prefers-reduced-motion: reduce) {
  * { animation-duration: 0.01s !important; animation-iteration-count: 1 !i=
mportant; scroll-behavior: auto !important; transition-duration: 0.01s !imp=
ortant; }
}

a { color: rgb(0, 102, 204); }

a.disabled { color: rgb(102, 102, 102); text-decoration: none; }

b { font-weight: 700; }

body { background-color: rgb(247, 247, 247); color: black; font-family: Ari=
al, Verdana, sans-serif; }

code { background: rgb(239, 239, 239); color: rgb(0, 96, 0); font-family: m=
onospace; }

em, i { font-style: italic; }

pre { background: rgb(239, 239, 239); border: 1px solid lightgray; margin: =
1em; padding: 0.5em 1em; }

header { align-items: center; display: flex; justify-content: space-between=
; margin: 5px 5px 5px 10px; }

header a { align-items: center; color: rgb(0, 102, 204); display: flex; tex=
t-decoration: none; }

header a h2 { width: 100%; }

header img { display: block; margin-right: 10px; }

#main-wrapper { display: flex; }

#sidebar-left { flex: 0 1 auto; font-size: 12px; line-height: 1.33em; min-w=
idth: 160px; width: 160px; }

#sidebar-left section { background-color: white; margin: 0px 5px 6px; paddi=
ng: 0px 0px 0px 5px; }

#sidebar-left a { color: rgb(0, 102, 204); display: block; text-decoration:=
 none; }

#sidebar-left a.selected { color: black; font-weight: bold; }

#sidebar-left h4 { color: rgb(72, 72, 72); font-weight: 700; font-size: 13p=
x; margin-bottom: 1px; padding: 3px 0px 2px; }

#sidebar-left #license { background-color: white; color: rgb(94, 106, 114);=
 font-size: 10px; line-height: normal; margin: 0px 5px 6px; padding: 11px 5=
px 5px; }

#sidebar-left #license a { display: inline; text-decoration: underline; }

#sidebar-left a#edit-this-page { background-color: rgb(3, 25, 79); border: =
1px solid silver; color: white; display: block; font-size: 14px; font-weigh=
t: 700; margin: 20px auto; padding: 6px 12px; text-align: center; text-deco=
ration: none; width: 90%; }

main { background-color: white; border: 1px solid lightgray; flex: 1 1 100%=
; font-family: Arial, Verdana, sans-serif; font-size: 13.333px; line-height=
: 1.3; margin-right: 5px; padding: 20px; }

main a:visited { color: rgb(71, 18, 100); }

main a.header-anchor { color: inherit; text-decoration: inherit; }

main blockquote { background-color: rgb(255, 253, 231); border-left: 0.2em =
solid rgb(250, 183, 0); color: black; margin-bottom: 1em; padding: 0.2em 1e=
m; }

main del { background-color: rgb(244, 204, 204); text-decoration: inherit; =
}

main h1 { font-size: 22px; font-weight: 700; margin: 10px 0px 1.4em; }

main h1 a { color: rgb(0, 102, 204); }

main h2 { font-size: 20px; font-weight: 700; margin: 1.2em 0px 0.8em; }

main h3 { font-size: 16px; font-weight: 700; margin: 1.2em 0px 0.7em; }

main h4 { font-weight: 700; margin: 1.2em 0px 0.6em; }

main h4 a { color: rgb(0, 102, 204); }

main h4 i a { color: rgb(0, 102, 204); font-weight: 400; }

main ins { background-color: rgb(217, 234, 211); text-decoration: inherit; =
}

main p { margin-bottom: 13.33px; margin-top: 1.4em; }

main pre { white-space: break-spaces; word-break: break-all; }

main #title-crumbs { padding: 6px 0px 0px 10px; }

main #title-crumbs + h3 { margin-top: 6px; }

main ul { display: block; list-style-position: outside; list-style-type: di=
sc; margin-bottom: 1em; margin-top: 1em; padding-left: 40px; }

main ul li { margin-bottom: 5px; margin-top: 5px; }

main ul li > p:first-of-type { display: inline; }

main ul ul { list-style-type: circle; margin-bottom: 0px; margin-top: 0px; =
}

main ul ul ul { list-style-type: square; }

main ol { list-style-position: outside; list-style-type: decimal; padding-l=
eft: 40px; margin: 1em 0px; }

main ol li { margin: 5px 0px; }

main ol li p { margin: 0.5em 0px; }

main ol li > p:first-of-type { display: inline; }

main ol ul { list-style-type: circle; margin-bottom: 0px; margin-top: 0px; =
}

main table { border-collapse: collapse; border-spacing: 0px; margin: 1.3em =
0px; }

main table td, main table th { border: 1px solid rgb(217, 217, 217); paddin=
g: 5px 10px; vertical-align: top; }

main nav.subpage-listing { background-color: rgb(241, 241, 241); border: 1p=
x solid lightgray; }

main nav.subpage-listing details { margin-left: -1em; }

main nav.subpage-listing h4 { margin: inherit; padding: 0.5em 0px 0px 0.5em=
; }

main nav.subpage-listing li { font-weight: normal; list-style: none none; m=
argin-left: 1.2em; padding-left: 1.3em; }

main nav.subpage-listing li a { text-decoration: none; }

main nav.subpage-listing ul { padding-left: 0px; }

main nav.subpage-listing > ul { margin: 0.5em 0px; }

main nav.subpage-listing > ul > li { border-top: 1px solid white; font-weig=
ht: bold; margin: 3px 0px; padding: 2px 0px 2px 1.3em; }

main .table-of-contents { border: 1px solid lightgray; background-color: rg=
b(241, 241, 241); display: table; font-size: 12px; margin-left: 1em; paddin=
g: 1em 2em 1em 1em; }

main .table-of-contents a { text-decoration: none; }

main .table-of-contents > ol::before { content: "Contents"; display: block;=
 font-weight: 700; margin: 0px 0px 0.5em -1em; }

main .table-of-contents ol { line-height: 1.1em; margin: 0px; padding-left:=
 1.2em; }

main .table-of-contents ol li { list-style-type: none; }

main .two-column-container { align-items: flex-start; display: flex; }

main .two-column-container > div.column { flex: 1 1 50%; margin: 0px; paddi=
ng-right: 30px; }
------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://www.chromium.org/_assets/icon-chromium-96.png

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
AElFTkSuQmCC

------MultipartBoundary--lZF5zfphJsITODcxdLvod5XK16E8ucAYwK8vEbcO0Z------
